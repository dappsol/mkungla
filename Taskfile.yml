version: '3'

vars:
  VERSION:
    sh: svu n

tasks:

  # Task: sign listed files
  sign:
    desc: Signing files in repository.
    cmds:
      - |
        FILES=(
          ".github/workflows/main.yml"
          "assets/README.md"
          "Taskfile.yml"
          ".goreleaser.yaml"
        )
        for FILE in "${FILES[@]}"; do
          if [ ! -f "$FILE.asc" ] || [ "$FILE" -nt "$FILE.asc" ]; then
            gpg --yes --armor --detach-sign --default-key $(dig +short TXT gpg.fingerprint.mkungla.dev | tr -d '"') "$FILE"
          else
            echo "No changes to $FILE, no need to update the signature."
          fi
        done

  # https://github.com/caarlos0/svu
  next:
    desc: |
      Prints next version based on Conventional Commits spec.
    cmds:
      - svu n

  release:
    desc: |
      To release new version in github, you must be ME ;)
      and have GITHUB_TOKEN env set e.g. in (.env) file
    preconditions:
      - sh: git diff-index --quiet HEAD
        msg: "Commit or stash changes first"
      - sh: git rev-parse --abbrev-ref HEAD | grep -qE '^main$'
        msg: "You must be on main branch"
    cmds:
      - task: release:prepare
      - task: sign
      - task: release:tag
      - task: release:publish

  # prepare release
  release:prepare:
    internal: true
    desc: prepare release
    cmds:
      - npm version --no-git-tag-version {{.VERSION}}

  # create new tag
  release:tag:
    internal: true
    desc: create new tag
    cmds:
      - echo "ðŸŽ‰ release new version {{.VERSION}} ðŸš€"
      - git add -A
      - |
        git commit -sm "ci: ðŸ”§ prepare {{.VERSION}} release"
      - git tag -sm "{{.VERSION}}" {{.VERSION}}
      - git push
      - git push --tags

  # https://goreleaser.com/
  release:publish:
    internal: true
    desc: Run GoReleaser either in snapshot or release mode
    vars:
      SNAPSHOT:
        sh: 'if [[ $(git describe --exact-match HEAD) != v* ]]; then echo "--snapshot"; fi'
    cmds:
      - goreleaser release --clean {{.SNAPSHOT}}
